package com.tesing.AutomationTesting;


import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;

public class RecurringDepositAutomation {

    WebDriver driver;

    @BeforeClass
    public void setup() {
       
        driver = new ChromeDriver();
        
        driver.manage().window().maximize();
        driver.get("https://emicalculator.net/recurring-deposit-calculator/"); 
    }

    @AfterClass
    public void teardown() {
        if (driver != null) {
            driver.quit();
        }
    }

    @Test(priority = 1)
    public void testFixedDepositForm() {
        driver.findElement(By.id("depositAmount")).sendKeys("50000");
        driver.findElement(By.id("tenure")).sendKeys("5");
        driver.findElement(By.id("rate")).sendKeys("6.5");
        driver.findElement(By.id("submitBtn")).click();

        String successMessage = driver.findElement(By.id("successMsg")).getText();
        Assert.assertEquals(successMessage, "FD submitted successfully!");

       
        String maturityAmount = driver.findElement(By.id("maturityAmount")).getText();
        System.out.println("Maturity Amount: " + maturityAmount);
    }

    @Test(priority = 2)
    public void testRecurringDepositForm() {
        driver.findElement(By.id("monthlyContribution")).clear();
        driver.findElement(By.id("monthlyContribution")).sendKeys("2000");
        driver.findElement(By.id("tenure")).clear();
        driver.findElement(By.id("tenure")).sendKeys("12");

        String totalInvestment = driver.findElement(By.id("totalInvestment")).getText();
        Assert.assertEquals(totalInvestment, "24000"); // 2000 x 12
    }

    @Test(priority = 3)
    public void testRDFormWithInvalidData() {
        driver.findElement(By.id("monthlyContribution")).clear();
        driver.findElement(By.id("monthlyContribution")).sendKeys("abc");

        String errorMsg = driver.findElement(By.id("errorMsg")).getText();
        Assert.assertTrue(errorMsg.contains("Enter valid number"));
    }

    @Test(priority = 4)
    public void testRequiredFieldValidation() {
        driver.navigate().refresh(); // Reset form
        driver.findElement(By.id("submitBtn")).click();

        Assert.assertTrue(driver.findElement(By.id("depositAmountError")).isDisplayed());
    }

    @Test(priority = 5)
    public void testDropdownOptions() {
        Select tenureDropdown = new Select(driver.findElement(By.id("tenure")));
        List<WebElement> options = tenureDropdown.getOptions();
        List<String> actualOptions = options.stream().map(WebElement::getText).collect(Collectors.toList());

        List<String> expectedOptions = Arrays.asList("1", "2", "3", "5", "10");
        Assert.assertEquals(actualOptions, expectedOptions);
    }

    @Test(priority = 6)
    public void testSubmitButtonEnabling() {
        driver.navigate().refresh();
        WebElement submitBtn = driver.findElement(By.id("submitBtn"));
        Assert.assertFalse(submitBtn.isEnabled());

        driver.findElement(By.id("depositAmount")).sendKeys("50000");
        driver.findElement(By.id("tenure")).sendKeys("5");
        driver.findElement(By.id("rate")).sendKeys("6.5");

        Assert.assertTrue(submitBtn.isEnabled());
    }
}
